import { useState } from "react";
import { useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";
import "./RegistrationForm.css"; 


const schema = yup.object().shape({
  username: yup.string().required("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω"),
  email: yup.string().email("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email").required("–í–≤–µ–¥–∏—Ç–µ email"),
  password: yup
    .string()
    .min(6, "–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
    .matches(/[A-Za-z]/, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—É–∫–≤–∞")
    .matches(/\d/, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–∏—Ñ—Ä–∞")
    .required("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"),
  confirmPassword: yup
    .string()
    .oneOf([yup.ref("password")], "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
    .required("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"),
});

const RegistrationForm = () => {
  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
  } = useForm({
    resolver: yupResolver(schema),
    mode: "onChange",
  });

  const [showPassword, setShowPassword] = useState(false);


  const onSubmit = (data: any) => {
    alert("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!");
    console.log("–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:", data);
  };

  return (
    <div className="form-container">
      <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
      <form onSubmit={handleSubmit(onSubmit)}>

        <label>–õ–æ–≥–∏–Ω</label>
        <input type="text" {...register("username")} />
        <p className="error">{errors.username?.message}</p>

        <label>Email</label>
        <input type="email" {...register("email")} />
        <p className="error">{errors.email?.message}</p>

        <label>–ü–∞—Ä–æ–ª—å</label>
        <div className="password-container">
          <input type={showPassword ? "text" : "password"} {...register("password")} />
          <button type="button" className="show-password" onClick={() => setShowPassword(!showPassword)}>
            {showPassword ? "üëÅ‚Äçüó®" : "üëÅ"}
          </button>
        </div>
        <p className="error">{errors.password?.message}</p>

        <label>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
        <input type="password" {...register("confirmPassword")} />
        <p className="error">{errors.confirmPassword?.message}</p>

        <button type="submit" disabled={!isValid}>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
      </form>
    </div>
  );
};

export default RegistrationForm;
